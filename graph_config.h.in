#ifndef BOOST_DYNOGRAPH_GRAPH_CONFIG_H
#define BOOST_DYNOGRAPH_GRAPH_CONFIG_H

//#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/use_mpi.hpp>
#include <boost/graph/distributed/adjacency_list.hpp>
#include <boost/graph/distributed/mpi_process_group.hpp>
typedef boost::@OUT_EDGE_LIST_TYPE@ OutEdgeList;
typedef boost::@VERTEX_LIST_TYPE@ VertexList;

// Define a new edge property for timestamps
namespace boost {
    enum edge_timestamp_t { edge_timestamp };
    BOOST_INSTALL_PROPERTY(edge, timestamp);
}

// Boost uses template nesting to implement multiple edge properties
typedef boost::property< boost::edge_timestamp_t, int64_t> Timestamp;
typedef boost::property< boost::edge_weight_t, int64_t, Timestamp> Weight;

typedef boost::graph::distributed::mpi_process_group ProcessGroup;

typedef boost::adjacency_list<
    OutEdgeList,
    boost::distributedS<ProcessGroup, VertexList>,
    boost::bidirectionalS,
    boost::no_property, /* Vertex properties */
    Weight /* Edge properties */
> Graph;

// Integer type for referring to a vertex by ID number
typedef boost::graph_traits<Graph>::vertices_size_type VertexId;
// Proxy object for a vertex that may be stored locally or remote
typedef boost::graph_traits<Graph>::vertex_descriptor Vertex;
typedef boost::graph_traits<Graph>::edge_descriptor Edge;

#endif